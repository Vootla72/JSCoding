
SWIFT
////////////
1.Explain Optiionals in swift. â€” https://www.programiz.com/swift-programming/optionals
	- unwrap the optionals
2. Difference between struct and class
    1. Start with difference between value and reference type
    2. For certain instance, wt would u prefer
2.Memory Management in Swift
 - ARC 

Difference between weak and strong reference
Difference between stack and heap


3.App Architecture â€” https://medium.com/@punitteraiya234/mvc-mvvm-architecture-in-swift-1964e4c2a0f9
    1. Simple architecture like MVC
    2. Complex architecture like MVVM or VIPER â€” good bet
1. 


TOP 20 iOS QUESTIONS-  https://manasaprema04.medium.com/top-20-ios-interview-questions-part-2-878fcad16d0d


https://leetcode.com/studyplan/30-days-of-javascript/





Why choose React? What sets it apart from other libraries and frameworks?
ðŸŒ² Understanding the Virtual DOM and its benefits in React
ðŸŒ² Exploring JSX and its advantages in React development
ðŸŒ² The concept of Reconciliation and its significance in React rendering
ðŸŒ² Understanding the differences between State and Props in React
ðŸŒ² Dive into Hooks-related questions, such as useState and useEffect
ðŸŒ² Exploring the differences between useMemo and useCallback in React
ðŸŒ² Understanding Code Splitting and its role in optimizing React applications
ðŸŒ² The importance of Accessibility considerations in React development
ðŸŒ² Unidirectional behavior in React and its impact on application architecture
ðŸŒ² Comparing Pure Components and Higher Order Components (HOC) in React
ðŸŒ² Addressing security concerns such as CSRF and XSRF in React applications
ðŸŒ² The various use cases of useEffect in different scenarios
ðŸŒ² Deepening your understanding of React optimization techniques
ðŸŒ² Exploring Lazy Loading and its benefits in React applications
ðŸŒ² Comparing Class-based and Functional-based components in React
ðŸŒ² Understanding SEO considerations and best practices in React applications
ðŸŒ² React Router and its role in handling client-side routing in React applications
ðŸŒ² Context API and how it facilitates state management in React without using Redux
ðŸŒ² Server-Side Rendering (SSR) and its benefits for performance and SEO in React applications
ðŸŒ² Error Handling and Error Boundaries in React to gracefully handle runtime errors
ðŸŒ² Testing React components using tools like Jest and React Testing Library
ðŸŒ² Form handling and validation techniques in React applications
ðŸŒ² Performance optimizations using memoization and shouldComponentUpdate
ðŸŒ² Handling asynchronous operations with async/await and Promises in React
ðŸŒ² Using React with popular UI libraries or frameworks like Material-UI or Bootstrap
ðŸŒ² React patterns and best practices for maintainable and scalable code



