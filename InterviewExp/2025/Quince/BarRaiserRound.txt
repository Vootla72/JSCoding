// Input: nums = [-1,0,1,2,-1,-4] 
// Output: [[-1,-1,2],[-1,0,1]] 
// Explanation: nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0. nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0. nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0. The distinct triplets are [-1,0,1] and [-1,-1,2]. Notice that the order of the output and the order of the triplets does not matter.


// Write a function that takes an array of integers 
// and returns a list of all the unique triplets [a, b, c] in the array such that a + b + c = 0.




const arr =[-1,0,1,2,-1,-4] ;

// [-4,-1,-1,0,1,2]

function getTriplets (arr){
    if(arr.length<3) return;
    let res = [];
    let n = arr.length;
  arr.sort((a,b)=> a-b);
  
  let i=0,j=1,k=n-1;
  
  for(let i=0;i<n-2;i++){
    console.log("i",i)
    j=i+1;
    k=n-1;
  
  while(j<k){
    // console.log(i,j,k)

    const sum = arr[i]+arr[j]+arr[k];
    // console.log(sum)
    if(sum>0) k--;
    else if(sum<0){
      // i++;
      j++;
      
    }
    else {
      console.log("o/p",[arr[i],arr[j],arr[k]])
    // res.push([arr[i],arr[j],arr[k]]);
    }
    
  }
  }
  return res;
  
}

console.log(getTriplets(arr))






const item = useDataStore((state)=> state.itemName)
const updateItem = useDataStore((state)=> state.updateItem)



itemName: string;
updateItem = ( val) => void

usecreate({get,set}=> {
  
  itemName:"";
  itemName1:""
  
  updateItem : (val) => {
    set({
      iteName:value
    })
    
      updateItem1 : (val) => {
    set({
      iteName1:get(). itemName
    })
  }
  
})


const state = useCreate();



const useCreateHook = ((get,set)) => {
  
  
  
  return {
    state: {
      
    }
  }
}
















// input --> onCHnge --. setValue(val) --> value={val}
//ref1=useRef -->null

//input ref={}









import { useState } from 'react';
export default function Counter() {
  const [number, setNumber] = useState(0);
  return (
    <>
      <h1>{number}</h1>
      <button onClick={() => {
        setNumber(number + 1);
        setNumber(number + 1);
        setNumber(number + 1);
      }}>+3</button>
    </>
  )
}






functin x(){
  
  var a=10;
  return function y(){
    
    var b=20;
    console.log(a,b)
  }
}



Array.prototype
== arr._proto_

arr._proto_.proto_ = Function.prototype
const abc = x();
abc();






1. real time example of closure -- debiunce, statemanagement
2. if i change h1 tag to h2 tag, how does the virtual dom works.. - will these tear down the tree or only text nodes
3. Create custom inheritance where u inherit by array prototype | functional prototype
4. controlled vs uncontrolled
